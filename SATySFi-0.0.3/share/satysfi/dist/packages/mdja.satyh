@require: pervasives
@require: code
@require: math
@require: itemize
@require: color
@require: hdecoset
@require: vdecoset


module MDJa : sig
  val document : 'a -> block-text -> document
    constraint 'a :: (|
      title  : inline-text;
      author : inline-text;
    |)

  direct +h1 : [inline-text; block-text] block-cmd
  direct +h2 : [inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct +ul : [inline-text list] block-cmd
  direct +ol : [inline-text list] block-cmd
  direct +code : [string] block-cmd
  direct +console : [string] block-cmd
  direct +quote : [block-text] block-cmd
  direct +hr : [] block-cmd
  direct +error : [string] block-cmd

  direct \code : [string] inline-cmd
  direct \emph : [inline-text] inline-cmd
  direct \bold : [inline-text] inline-cmd
  direct \link : [string; inline-text] inline-cmd
  direct \hard-break : [] inline-cmd
  direct \embed-block : [block-text] inline-cmd
  direct \error : [string] inline-cmd
end = struct


  let paper = A4Paper
  let text-origin = (80pt, 100pt)
  let text-width = 440pt
  let text-height = 630pt
  let footer-origin = (40pt, 780pt)

  let skip-before-content = 20pt

  let font-size-main = 12pt
  let font-size-title = 20pt
  let font-size-h1 = 18pt
  let font-size-h2 = 16pt

  let font-ratio-cjk = 0.88

  let font-latin-roman  = (`Junicode`   , 1., 0.)
  let font-latin-italic = (`Junicode-it`, 1., 0.)
  let font-latin-sans   = (`lmsans`     , 1., 0.)
  let font-latin-mono   = (`lmmono`     , 1., 0.)

  let font-cjk-gothic = (`ipaexg`, font-ratio-cjk, 0.)
  let font-cjk-mincho = (`ipaexm`, font-ratio-cjk, 0.)

  let hr-margin = 5mm
  let hr-thickness = 1pt

  let code-background = Gray(0.875)

  let-mutable h1-number <- 0
  let-mutable h2-number <- 0
  let-mutable h3-number <- 0
  let-mutable h4-number <- 0
  let-mutable h5-number <- 0
  let-mutable h6-number <- 0


  let set-latin-font font ctx =
    ctx |> set-font Latin font


  let set-cjk-font font ctx =
    ctx |> set-font Kana font
        |> set-font HanIdeographic font


  let initial-context =
    get-initial-context text-width (command \math)
      |> set-dominant-narrow-script Latin
      |> set-dominant-wide-script Kana
      |> set-latin-font font-latin-roman
      |> set-cjk-font font-cjk-mincho
      |> set-hyphen-penalty 1000
      |> set-space-ratio 0.275 0.08 0.12


  let footer pbinfo =
    let it-nombre = embed-string (arabic pbinfo#page-number) in
    let ctx = initial-context in
    line-break true true ctx
      (inline-fil ++ read-inline ctx {— #it-nombre; —} ++ inline-fil)


  let make-title-context ctx =
    ctx |> set-font-size font-size-title
        |> set-latin-font font-latin-roman
        |> set-cjk-font font-cjk-mincho


  let document rcd bt =
    let ctx = initial-context in
    let bb-title =
      let ctx = ctx |> make-title-context in
      line-break true true ctx
        (inline-fil ++ read-inline ctx rcd#title ++ inline-fil)
    in
    let bb-author =
      line-break true true ctx
        (inline-fil ++ read-inline ctx rcd#author)
    in
    let bb-main = read-block ctx bt in
    let pagecontf _ =
      (|
        text-origin = text-origin;
        text-height = text-height;
      |)
    in
    let pagepartsf pbinfo =
      (|
        header-origin  = (0pt, 0pt);
        header-content = block-nil;
        footer-origin  = footer-origin;
        footer-content = footer pbinfo;
      |)
    in
    page-break paper pagecontf pagepartsf
      (List.fold-left (+++) block-nil [
        bb-title; bb-author;
        block-skip skip-before-content;
        bb-main;
      ])


  let increment-counter counter counter-children =
    let () = counter <- !counter + 1 in
    counter-children |> List.iter (fun r -> (r <- 0))


  let heading-scheme ctx counter counter-children bb-title-thunk bt =
    let () = increment-counter counter counter-children in
    let bb-title = bb-title-thunk () in
    let bb-content = read-block ctx bt in
    bb-title +++ bb-content


  let h1-heading ctx =
    ctx |> set-font-size font-size-h1
        |> set-latin-font font-latin-sans
        |> set-cjk-font font-cjk-gothic


  let h2-heading ctx =
    ctx |> set-font-size font-size-h2
        |> set-latin-font font-latin-sans
        |> set-cjk-font font-cjk-gothic


  let-block ctx +h1 it bt =
    let bb-title-thunk () =
      let s-num = arabic !h1-number in
      let it-num = embed-string s-num in
      let ctx = ctx |> h1-heading in
      line-break true false ctx
        (read-inline ctx {#it-num;. #it;} ++ inline-fil)
    in
    heading-scheme ctx h1-number
      [h2-number; h3-number; h4-number; h5-number; h6-number]
      bb-title-thunk
      bt


  let-block ctx +h2 it bt =
    let bb-title-thunk () =
      let s-num = arabic !h1-number ^ `.` ^ arabic !h2-number in
      let it-num = embed-string s-num in
      let ctx = ctx |> h2-heading in
      line-break true false ctx
        (read-inline ctx {#it-num;. #it;} ++ inline-fil)
    in
    heading-scheme ctx h2-number
      [h3-number; h4-number; h5-number; h6-number]
      bb-title-thunk
      bt


  let get-quad-size ctx =
    get-font-size ctx *' font-ratio-cjk


  let-block ctx +p it =
    let indent-size = 0pt in % get-quad-size ctx in
    line-break true true ctx
      (inline-skip indent-size ++ read-inline ctx it ++ inline-fil)


  let-block +ul its =
    let items = its |> List.map (fun it -> Item(it, [])) in
    '<+listing(Item({}, items));>


  let-block +ol its =
    let items = its |> List.map (fun it -> Item(it, [])) in
    '<+enumerate(Item({}, items));>


  let fix-block-code s =
    string-unexplode [0x0A] ^ s
      % dirty trick; should fix '+Code.code' and the parser of SATySFi


  let-block ctx +code s =
    let ctx = set-font-size (get-font-size ctx *' 0.875) ctx in
    read-block ctx '<+Code.code(fix-block-code s);>


  let-block +console s =
    '<+Code.console(fix-block-code s);>


  let-block ctx +quote it =
    let qsize = get-quad-size ctx in
    let pads = (qsize, 0pt, 0pt, 0pt) in
    let decoset = VDecoSet.quote-round 6pt 4pt (Gray(0.75)) in
    block-frame-breakable ctx pads decoset
      (fun ctx -> read-block ctx it)


  let-block ctx +hr =
    let w = get-text-width ctx in
    let h = hr-margin +' hr-thickness *' 0.5 in
    let color = (Gray(0.75)) in
    line-break true true ctx
      (inline-graphics w h h (fun (x, y) ->
        [ stroke hr-thickness color (Gr.line (x, y) (x +' w, y)); ]
      ))

  let-block ctx +error s =
    let ctx = ctx |> set-text-color Color.red in
    let it = embed-string s in
    line-break true true ctx
      (read-inline ctx {ERROR (B): \"#it;\"} ++ inline-fil)


  let-inline ctx \emph it =
    let ctx =
      ctx |> set-cjk-font font-cjk-gothic
          |> set-latin-font font-latin-sans
    in
    read-inline ctx it


  let-inline \bold it =
    {\emph(it);}


  let strut h d =
    inline-graphics 0pt h d (fun _ -> [])


  let-inline ctx \code s =
    let ib-strut = strut 8pt 3pt in
    let ib =
      let ctx =
        ctx
          |> set-latin-font font-latin-mono
          |> set-cjk-font font-cjk-gothic
          |> set-every-word-break inline-nil ib-strut
      in
        ib-strut ++ read-inline ctx (embed-string s)
    in
    let pads = (2pt, 2pt, 2pt, 2pt) in
    let decoset = HDecoSet.rectangle-round-fill 4pt 2pt code-background in
    script-guard Latin (inline-frame-breakable pads decoset ib)


  let-inline ctx \url s =
    let ctx =
      ctx |> set-latin-font font-latin-mono
          |> set-cjk-font font-cjk-gothic
    in
    read-inline ctx (embed-string s)


  let-inline \link s it =
    {#it;(\url(s);)}


  let-inline ctx \hard-break =
    mandatory-break ctx


  let-inline ctx \embed-block bt =
    inline-fil ++ embed-block-breakable ctx (read-block ctx bt)


  let-inline ctx \error s =
    let ctx = ctx |> set-text-color Color.red in
    let it = embed-string s in
    read-inline ctx {ERROR (I): \"#it;\"}

end
